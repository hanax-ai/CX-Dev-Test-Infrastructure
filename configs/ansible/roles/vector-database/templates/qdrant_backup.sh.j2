#!/bin/bash
# Qdrant Backup Script for Citadel Alpha
# Generated by Ansible - vector-database role

BACKUP_DIR="/var/backups/qdrant"
RETENTION_DAYS="{{ backup_retention_days }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
QDRANT_API="http://127.0.0.1:{{ qdrant_port }}"
API_KEY="{{ qdrant_api_key }}"

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

echo "Starting Qdrant backup at $(date)"

# Backup each collection
{% for collection in vector_collections %}
echo "Creating snapshot for collection: {{ collection.name }}"
SNAPSHOT_RESPONSE=$(curl -s -X POST \
  -H "api-key: $API_KEY" \
  "$QDRANT_API/collections/{{ collection.name }}/snapshots")

SNAPSHOT_NAME=$(echo "$SNAPSHOT_RESPONSE" | grep -o '"name":"[^"]*"' | cut -d'"' -f4)

if [ ! -z "$SNAPSHOT_NAME" ]; then
    echo "✅ Snapshot created: $SNAPSHOT_NAME"
    
    # Download the snapshot
    curl -H "api-key: $API_KEY" \
         "$QDRANT_API/collections/{{ collection.name }}/snapshots/$SNAPSHOT_NAME" \
         -o "$BACKUP_DIR/{{ collection.name }}_$TIMESTAMP.snapshot"
    
    if [ $? -eq 0 ]; then
        echo "✅ {{ collection.name }} snapshot downloaded"
        gzip "$BACKUP_DIR/{{ collection.name }}_$TIMESTAMP.snapshot"
    else
        echo "❌ {{ collection.name }} snapshot download failed"
    fi
else
    echo "❌ Failed to create snapshot for {{ collection.name }}"
fi
{% endfor %}

# Backup Qdrant configuration
cp /etc/qdrant/config.yaml "$BACKUP_DIR/qdrant_config_$TIMESTAMP.yaml"
gzip "$BACKUP_DIR/qdrant_config_$TIMESTAMP.yaml"

# Cleanup old backups
echo "Cleaning up backups older than $RETENTION_DAYS days"
find "$BACKUP_DIR" -name "*.snapshot.gz" -mtime +$RETENTION_DAYS -delete
find "$BACKUP_DIR" -name "*.yaml.gz" -mtime +$RETENTION_DAYS -delete

# Log backup completion
echo "$(date): Qdrant backup completed" >> /var/log/qdrant_backup.log
echo "Qdrant backup completed at $(date)"
