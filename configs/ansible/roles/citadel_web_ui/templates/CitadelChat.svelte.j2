<script>
  import { onMount } from 'svelte';
  import { writable } from 'svelte/store';
  
  // API Gateway configuration from Ansible variables
  const API_BASE_URL = '{{ api_gateway.base_url }}';
  const CHAT_ENDPOINT = '{{ api_gateway.endpoints.chat }}';
  const MODELS_ENDPOINT = '{{ api_gateway.endpoints.models }}';
  
  // Component state
  export const conversations = writable([]);
  export const activeConversation = writable(null);
  export const availableModels = writable([]);
  export const selectedModel = writable('');
  
  let messages = [];
  let currentMessage = '';
  let isLoading = false;
  let chatContainer;
  
  // Initialize chat interface
  onMount(async () => {
    await loadAvailableModels();
    await loadConversationHistory();
  });
  
  // Load available LLM models from API Gateway
  async function loadAvailableModels() {
    try {
      const response = await fetch(`${API_BASE_URL}${MODELS_ENDPOINT}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('clerk_session')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const models = await response.json();
        availableModels.set(models);
        
        // Set default model from configuration
        const defaultModels = {{ webui_config.default_models }};
        if (defaultModels.length > 0) {
          selectedModel.set(defaultModels[0]);
        }
      }
    } catch (error) {
      console.error('Failed to load models:', error);
    }
  }
  
  // Load conversation history
  async function loadConversationHistory() {
    try {
      const response = await fetch(`${API_BASE_URL}/api/v1/conversations`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('clerk_session')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const history = await response.json();
        conversations.set(history);
      }
    } catch (error) {
      console.error('Failed to load conversation history:', error);
    }
  }
  
  // Send chat message
  async function sendMessage() {
    if (!currentMessage.trim() || isLoading) return;
    
    const userMessage = {
      role: 'user',
      content: currentMessage,
      timestamp: new Date().toISOString()
    };
    
    messages = [...messages, userMessage];
    const messageToSend = currentMessage;
    currentMessage = '';
    isLoading = true;
    
    try {
      const response = await fetch(`${API_BASE_URL}${CHAT_ENDPOINT}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('clerk_session')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: $selectedModel,
          messages: messages,
          stream: false,
          max_tokens: 2048,
          temperature: 0.7
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        const assistantMessage = {
          role: 'assistant',
          content: result.choices[0].message.content,
          timestamp: new Date().toISOString(),
          model: $selectedModel
        };
        
        messages = [...messages, assistantMessage];
        
        // Auto-scroll to bottom
        setTimeout(() => {
          if (chatContainer) {
            chatContainer.scrollTop = chatContainer.scrollHeight;
          }
        }, 100);
      } else {
        throw new Error(`Chat request failed: ${response.status}`);
      }
    } catch (error) {
      console.error('Chat error:', error);
      const errorMessage = {
        role: 'system',
        content: `Error: ${error.message}`,
        timestamp: new Date().toISOString(),
        isError: true
      };
      messages = [...messages, errorMessage];
    } finally {
      isLoading = false;
    }
  }
  
  // Handle Enter key for sending messages
  function handleKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      sendMessage();
    }
  }
  
  // Start new conversation
  function newConversation() {
    messages = [];
    activeConversation.set(null);
  }
  
  // Format timestamp for display
  function formatTimestamp(timestamp) {
    return new Date(timestamp).toLocaleTimeString();
  }
</script>

<div class="citadel-chat">
  <div class="chat-header">
    <div class="header-left">
      <h1>{{ webui_config.site_name }} Chat</h1>
      <div class="model-selector">
        <label for="model-select">Model:</label>
        <select id="model-select" bind:value={$selectedModel}>
          {#each $availableModels as model}
            <option value={model.id}>{model.name}</option>
          {/each}
        </select>
      </div>
    </div>
    
    <div class="header-actions">
      <button class="new-chat-btn" on:click={newConversation}>
        New Chat
      </button>
    </div>
  </div>
  
  <div class="chat-container" bind:this={chatContainer}>
    {#each messages as message, index}
      <div class="message {message.role}" class:error={message.isError}>
        <div class="message-header">
          <span class="role">{message.role === 'user' ? 'You' : 'Assistant'}</span>
          <span class="timestamp">{formatTimestamp(message.timestamp)}</span>
          {#if message.model}
            <span class="model-tag">{message.model}</span>
          {/if}
        </div>
        <div class="message-content">
          {message.content}
        </div>
      </div>
    {/each}
    
    {#if isLoading}
      <div class="message assistant loading">
        <div class="message-header">
          <span class="role">Assistant</span>
          <span class="timestamp">Thinking...</span>
        </div>
        <div class="message-content">
          <div class="typing-indicator">
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
      </div>
    {/if}
  </div>
  
  <div class="chat-input">
    <div class="input-container">
      <textarea
        bind:value={currentMessage}
        on:keypress={handleKeyPress}
        placeholder="Type your message here... (Enter to send, Shift+Enter for new line)"
        rows="3"
        disabled={isLoading}
      ></textarea>
      <button 
        class="send-btn" 
        on:click={sendMessage} 
        disabled={!currentMessage.trim() || isLoading}
      >
        Send
      </button>
    </div>
  </div>
</div>

<style>
  .citadel-chat {
    display: flex;
    flex-direction: column;
    height: 100vh;
    max-height: 100vh;
    background: var(--bg-primary);
  }
  
  .chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    background: var(--bg-secondary);
  }
  
  .header-left h1 {
    margin: 0;
    color: var(--primary-color, {{ branding.primary_color }});
    font-size: 1.5rem;
  }
  
  .model-selector {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }
  
  .model-selector label {
    font-size: 0.9rem;
    color: var(--secondary-text);
  }
  
  .model-selector select {
    padding: 0.25rem 0.5rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    background: var(--bg-primary);
    color: var(--primary-text);
  }
  
  .new-chat-btn {
    background: var(--primary-color, {{ branding.primary_color }});
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
  }
  
  .chat-container {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    background: var(--bg-primary);
  }
  
  .message {
    margin-bottom: 1.5rem;
    max-width: 80%;
  }
  
  .message.user {
    margin-left: auto;
    background: var(--user-message-bg, #e3f2fd);
    border-radius: 12px 12px 4px 12px;
    padding: 0.75rem;
  }
  
  .message.assistant {
    margin-right: auto;
    background: var(--assistant-message-bg, #f5f5f5);
    border-radius: 12px 12px 12px 4px;
    padding: 0.75rem;
  }
  
  .message.error {
    background: var(--error-bg, #ffebee);
    border-left: 4px solid var(--error-color, #f44336);
  }
  
  .message-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 0.8rem;
  }
  
  .role {
    font-weight: 600;
    color: var(--primary-color, {{ branding.primary_color }});
  }
  
  .timestamp {
    color: var(--secondary-text);
  }
  
  .model-tag {
    background: var(--tag-bg, #e0e0e0);
    padding: 0.125rem 0.375rem;
    border-radius: 4px;
    font-size: 0.7rem;
    color: var(--tag-text);
  }
  
  .message-content {
    line-height: 1.6;
    color: var(--primary-text);
    white-space: pre-wrap;
  }
  
  .typing-indicator {
    display: flex;
    gap: 0.25rem;
  }
  
  .typing-indicator span {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: var(--primary-color, {{ branding.primary_color }});
    animation: typing 1.4s infinite ease-in-out;
  }
  
  .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
  .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }
  
  @keyframes typing {
    0%, 80%, 100% { transform: scale(0); }
    40% { transform: scale(1); }
  }
  
  .chat-input {
    padding: 1rem;
    border-top: 1px solid var(--border-color);
    background: var(--bg-secondary);
  }
  
  .input-container {
    display: flex;
    gap: 0.75rem;
    align-items: flex-end;
  }
  
  .input-container textarea {
    flex: 1;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem;
    font-family: inherit;
    font-size: 0.95rem;
    resize: vertical;
    min-height: 3rem;
    max-height: 8rem;
    background: var(--bg-primary);
    color: var(--primary-text);
  }
  
  .input-container textarea:focus {
    outline: none;
    border-color: var(--primary-color, {{ branding.primary_color }});
  }
  
  .send-btn {
    background: var(--primary-color, {{ branding.primary_color }});
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    min-width: 70px;
  }
  
  .send-btn:disabled {
    background: var(--disabled-bg, #ccc);
    cursor: not-allowed;
  }
</style>
