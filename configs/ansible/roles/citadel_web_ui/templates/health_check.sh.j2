#!/bin/bash
# Citadel Web UI Health Check Script
# Generated by Ansible - monitors web interface health and dependencies
# Path: /usr/local/bin/web_ui_health_check.sh

set -euo pipefail

# Configuration from Ansible variables
WEB_UI_URL="http://127.0.0.1:{{ app_port }}"
API_GATEWAY_URL="{{ api_gateway.base_url }}"
LOG_FILE="{{ app_directory }}/logs/health_check.log"
PID_FILE="{{ app_directory }}/web_ui.pid"
SERVICE_NAME="citadel_web_ui"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Check if web UI service is running
check_service_status() {
    log "Checking Web UI service status..."
    
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        log "✓ Web UI service is running"
        return 0
    else
        log "✗ Web UI service is not running"
        return 1
    fi
}

# Check if PM2 process is running
check_pm2_status() {
    log "Checking PM2 process status..."
    
    if sudo -u www-data pm2 describe {{ app_name }} >/dev/null 2>&1; then
        local status=$(sudo -u www-data pm2 describe {{ app_name }} | grep "status" | awk '{print $4}')
        if [[ "$status" == "online" ]]; then
            log "✓ PM2 process is online"
            return 0
        else
            log "✗ PM2 process status: $status"
            return 1
        fi
    else
        log "✗ PM2 process not found"
        return 1
    fi
}

# Check web UI HTTP endpoint
check_web_ui_endpoint() {
    log "Checking Web UI HTTP endpoint..."
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$WEB_UI_URL" || echo "000")
    
    if [[ "$response" == "200" ]]; then
        log "✓ Web UI endpoint is responding (HTTP $response)"
        return 0
    else
        log "✗ Web UI endpoint check failed (HTTP $response)"
        return 1
    fi
}

# Check API Gateway connectivity
check_api_gateway() {
    log "Checking API Gateway connectivity..."
    
    local response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$API_GATEWAY_URL/health" || echo "000")
    
    if [[ "$response" == "200" ]]; then
        log "✓ API Gateway is accessible (HTTP $response)"
        return 0
    else
        log "✗ API Gateway check failed (HTTP $response)"
        return 1
    fi
}

# Check disk space
check_disk_space() {
    log "Checking disk space..."
    
    local usage=$(df {{ app_directory }} | awk 'NR==2 {print $5}' | sed 's/%//')
    
    if [[ $usage -lt 85 ]]; then
        log "✓ Disk usage is acceptable ($usage%)"
        return 0
    elif [[ $usage -lt 95 ]]; then
        log "⚠ Disk usage is high ($usage%)"
        return 1
    else
        log "✗ Disk usage is critical ($usage%)"
        return 1
    fi
}

# Check memory usage
check_memory_usage() {
    log "Checking memory usage..."
    
    local total_mem=$(free -m | awk 'NR==2{printf "%.0f", $2}')
    local used_mem=$(free -m | awk 'NR==2{printf "%.0f", $3}')
    local usage=$((used_mem * 100 / total_mem))
    
    if [[ $usage -lt 85 ]]; then
        log "✓ Memory usage is acceptable ($usage%)"
        return 0
    elif [[ $usage -lt 95 ]]; then
        log "⚠ Memory usage is high ($usage%)"
        return 1
    else
        log "✗ Memory usage is critical ($usage%)"
        return 1
    fi
}

# Check log file sizes
check_log_sizes() {
    log "Checking log file sizes..."
    
    local log_dir="{{ app_directory }}/logs"
    local total_size=$(du -sm "$log_dir" 2>/dev/null | cut -f1 || echo "0")
    
    if [[ $total_size -lt 100 ]]; then
        log "✓ Log directory size is acceptable (${total_size}MB)"
        return 0
    elif [[ $total_size -lt 500 ]]; then
        log "⚠ Log directory size is large (${total_size}MB)"
        return 1
    else
        log "✗ Log directory size is too large (${total_size}MB)"
        return 1
    fi
}

# Check database connectivity (if configured)
check_database() {
    log "Checking database connectivity..."
    
    if command -v psql >/dev/null 2>&1; then
        local db_check=$(PGPASSWORD="${PGPASSWORD:-}" psql -h "{{ database_config.postgresql.host }}" \
                        -p "{{ database_config.postgresql.port }}" \
                        -U "{{ database_config.postgresql.user }}" \
                        -d "{{ database_config.postgresql.database }}" \
                        -c "SELECT 1;" 2>/dev/null | grep -c "1 row" || echo "0")
        
        if [[ "$db_check" == "1" ]]; then
            log "✓ Database connection successful"
            return 0
        else
            log "✗ Database connection failed"
            return 1
        fi
    else
        log "⚠ PostgreSQL client not available, skipping database check"
        return 0
    fi
}

# Check SSL certificate (if HTTPS enabled)
check_ssl_certificate() {
    if [[ "{{ tls_enabled | default(false) | lower }}" == "true" ]]; then
        log "Checking SSL certificate..."
        
        local cert_check=$(echo | timeout 10 openssl s_client -connect {{ ansible_default_ipv4.address }}:443 -servername {{ ansible_default_ipv4.address }} 2>/dev/null | openssl x509 -noout -dates 2>/dev/null | grep "notAfter" || echo "")
        
        if [[ -n "$cert_check" ]]; then
            log "✓ SSL certificate is valid"
            return 0
        else
            log "✗ SSL certificate check failed"
            return 1
        fi
    else
        log "ℹ SSL not enabled, skipping certificate check"
        return 0
    fi
}

# Restart service if needed
restart_service() {
    log "Attempting to restart Web UI service..."
    
    # Try PM2 restart first
    if sudo -u www-data pm2 restart {{ app_name }} >/dev/null 2>&1; then
        log "✓ PM2 process restarted successfully"
        sleep 10
        return 0
    fi
    
    # Fall back to systemctl restart
    if systemctl restart "$SERVICE_NAME"; then
        log "✓ Web UI service restarted successfully"
        sleep 15
        return 0
    else
        log "✗ Failed to restart Web UI service"
        return 1
    fi
}

# Main health check function
main() {
    local exit_code=0
    local checks_failed=0
    local checks_warning=0
    
    log "=== Starting Citadel Web UI Health Check ==="
    
    # Critical checks
    if ! check_service_status; then
        ((checks_failed++))
        exit_code=2
    fi
    
    if ! check_pm2_status; then
        ((checks_failed++))
        exit_code=2
    fi
    
    if ! check_web_ui_endpoint; then
        ((checks_failed++))
        exit_code=2
    fi
    
    # Important checks
    if ! check_api_gateway; then
        ((checks_warning++))
        [[ $exit_code -eq 0 ]] && exit_code=1
    fi
    
    if ! check_database; then
        ((checks_warning++))
        [[ $exit_code -eq 0 ]] && exit_code=1
    fi
    
    # System resource checks
    if ! check_disk_space; then
        ((checks_warning++))
        [[ $exit_code -eq 0 ]] && exit_code=1
    fi
    
    if ! check_memory_usage; then
        ((checks_warning++))
        [[ $exit_code -eq 0 ]] && exit_code=1
    fi
    
    if ! check_log_sizes; then
        ((checks_warning++))
        [[ $exit_code -eq 0 ]] && exit_code=1
    fi
    
    # SSL check
    if ! check_ssl_certificate; then
        ((checks_warning++))
        [[ $exit_code -eq 0 ]] && exit_code=1
    fi
    
    # Auto-restart if critical failures detected and restart is enabled
    if [[ $checks_failed -gt 0 && "${AUTO_RESTART:-false}" == "true" ]]; then
        log "Critical failures detected, attempting auto-restart..."
        if restart_service; then
            # Re-run critical checks after restart
            sleep 10
            if check_service_status && check_pm2_status && check_web_ui_endpoint; then
                log "✓ Service restart successful, health restored"
                exit_code=0
                checks_failed=0
            else
                log "✗ Service restart failed to restore health"
                exit_code=2
            fi
        fi
    fi
    
    # Summary
    log "=== Health Check Summary ==="
    log "Critical failures: $checks_failed"
    log "Warnings: $checks_warning"
    
    case $exit_code in
        0)
            log "✓ All health checks passed"
            ;;
        1)
            log "⚠ Health check completed with warnings"
            ;;
        2)
            log "✗ Health check failed - critical issues detected"
            ;;
    esac
    
    log "=== Health Check Complete ==="
    exit $exit_code
}

# Handle script arguments
case "${1:-check}" in
    "check")
        main
        ;;
    "restart")
        restart_service
        ;;
    "status")
        check_service_status && check_pm2_status && check_web_ui_endpoint
        ;;
    *)
        echo "Usage: $0 {check|restart|status}"
        echo "  check   - Run full health check (default)"
        echo "  restart - Restart the service"
        echo "  status  - Quick status check"
        exit 1
        ;;
esac
