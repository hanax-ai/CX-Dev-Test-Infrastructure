// Citadel Web UI Configuration
// Generated by Ansible - Do not modify manually

export const config = {
  // Application Information
  app: {
    name: '{{ webui_config.site_name }}',
    description: '{{ webui_config.site_description }}',
    version: '{{ app_version }}',
    environment: '{{ ansible_env.NODE_ENV | default("production") }}'
  },

  // Server Configuration
  server: {
    host: '{{ app_host }}',
    port: {{ app_port }},
    baseUrl: 'http://{{ ansible_default_ipv4.address }}:{{ app_port }}'
  },

  // API Gateway Integration
  api: {
    gateway: {
      baseUrl: '{{ api_gateway.base_url }}',
      endpoints: {
        chat: '{{ api_gateway.endpoints.chat }}',
        rag: '{{ api_gateway.endpoints.rag }}',
        auth: '{{ api_gateway.endpoints.auth }}',
        models: '{{ api_gateway.endpoints.models }}'
      },
      timeout: {{ performance.timeout }}
    }
  },

  // Clerk Authentication Configuration
  auth: {
    clerk: {
      publishableKey: '{{ clerk_config.publishable_key }}',
      frontendApi: '{{ clerk_config.frontend_api }}',
      signInUrl: '/sign-in',
      signUpUrl: '/sign-up',
      afterSignInUrl: '/dashboard',
      afterSignUpUrl: '/onboarding'
    },
    session: {
      secret: '{{ security.session_secret }}',
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
      secure: {{ security.secure_cookies | lower }},
      httpOnly: true,
      sameSite: 'strict'
    }
  },

  // Database Configuration
  database: {
    postgresql: {
      host: '{{ database_config.postgresql.host }}',
      port: {{ database_config.postgresql.port }},
      database: '{{ database_config.postgresql.database }}',
      user: '{{ database_config.postgresql.user }}',
      ssl: false,
      pool: {
        min: 2,
        max: 10,
        idle: 10000
      }
    }
  },

  // Security Configuration
  security: {
    cors: {
      origin: {{ security.cors_origins | to_json }},
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
    },
    csrf: {
      enabled: {{ security.csrf_protection | lower }}
    },
    rateLimit: {
      windowMs: 15 * 60 * 1000, // 15 minutes
      max: 100, // limit each IP to 100 requests per windowMs
      standardHeaders: true,
      legacyHeaders: false
    }
  },

  // Performance Configuration
  performance: {
    compression: {{ performance.compression | lower }},
    maxRequestSize: '{{ performance.max_request_size }}',
    timeout: {{ performance.timeout }},
    keepAliveTimeout: {{ performance.keep_alive_timeout }}
  },

  // Feature Flags
  features: {
    enableRAG: {{ features.enable_rag | lower }},
    enableDocumentUpload: {{ features.enable_document_upload | lower }},
    enableConversationHistory: {{ features.enable_conversation_history | lower }},
    enableModelSwitching: {{ features.enable_model_switching | lower }},
    enableAdminPanel: {{ features.enable_admin_panel | lower }}
  },

  // UI Configuration
  ui: {
    branding: {
      primaryColor: '{{ branding.primary_color }}',
      secondaryColor: '{{ branding.secondary_color }}',
      logoUrl: '{{ branding.logo_url }}',
      faviconUrl: '{{ branding.favicon_url }}',
      customCss: {{ branding.custom_css | lower }}
    },
    theme: {
      defaultTheme: 'light',
      allowThemeToggle: true
    },
    layout: {
      sidebarCollapsed: false,
      showBreadcrumbs: true,
      showFooter: true
    }
  },

  // LLM Model Configuration
  models: {
    default: {{ webui_config.default_models | to_json }},
    chat: {
      maxTokens: 2048,
      temperature: 0.7,
      topP: 0.9,
      frequencyPenalty: 0,
      presencePenalty: 0,
      stream: true
    },
    rag: {
      maxResults: 5,
      similarityThreshold: 0.7,
      includeContext: true,
      maxContextLength: 4000
    }
  },

  // Upload Configuration
  uploads: {
    maxFileSize: '10MB',
    allowedTypes: ['.pdf', '.txt', '.docx', '.md', '.json'],
    uploadPath: '/uploads',
    tempPath: '/tmp/uploads'
  },

  // Logging Configuration
  logging: {
    level: 'info',
    format: 'combined',
    directory: '{{ app_directory }}/logs',
    filename: 'access.log',
    maxSize: '10m',
    maxFiles: '7d',
    datePattern: 'YYYY-MM-DD'
  },

  // Monitoring and Health Checks
  monitoring: {
    healthCheck: {
      enabled: true,
      endpoint: '/health',
      interval: 30000 // 30 seconds
    },
    metrics: {
      enabled: true,
      endpoint: '/metrics',
      collectDefaultMetrics: true
    }
  },

  // Development Configuration
  development: {
    hotReload: {{ 'true' if ansible_env.NODE_ENV == 'development' else 'false' }},
    sourceMap: {{ 'true' if ansible_env.NODE_ENV == 'development' else 'false' }},
    debugMode: {{ 'true' if ansible_env.NODE_ENV == 'development' else 'false' }}
  }
};

// Environment-specific overrides
if (typeof window !== 'undefined') {
  // Client-side configuration
  window.CITADEL_CONFIG = {
    api: config.api,
    auth: {
      clerk: config.auth.clerk
    },
    ui: config.ui,
    features: config.features,
    models: config.models,
    uploads: config.uploads
  };
}

export default config;
