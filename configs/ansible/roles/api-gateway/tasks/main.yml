---
- name: Install Python and system dependencies
  block:
    - name: Add Python PPA repository
      apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present

    - name: Install Python and development tools
      apt:
        name:
          - "python{{ python_version }}"
          - "python{{ python_version }}-dev"
          - "python{{ python_version }}-venv"
          - python3-pip
          - build-essential
          - libpq-dev
          - redis-tools
          - nginx
          - curl
          - jq
        state: present
        update_cache: yes

- name: Setup application directory and virtual environment
  block:
    - name: Create application directory
      file:
        path: "{{ app_directory }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create Python virtual environment
      command: "python{{ python_version }} -m venv {{ virtual_env_path }}"
      args:
        creates: "{{ virtual_env_path }}/bin/activate"
      become_user: www-data

    - name: Upgrade pip in virtual environment
      pip:
        name: pip
        state: latest
        virtualenv: "{{ virtual_env_path }}"
        virtualenv_command: "python{{ python_version }} -m venv"

- name: Install Python dependencies
  block:
    - name: Create requirements file
      template:
        src: requirements.txt.j2
        dest: "{{ app_directory }}/requirements.txt"
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Install Python packages
      pip:
        requirements: "{{ app_directory }}/requirements.txt"
        virtualenv: "{{ virtual_env_path }}"
        virtualenv_command: "python{{ python_version }} -m venv"

- name: Deploy API Gateway application
  block:
    - name: Create main application file
      template:
        src: main.py.j2
        dest: "{{ app_directory }}/main.py"
        owner: www-data
        group: www-data
        mode: '0644'
      notify: restart api-gateway

    - name: Create configuration file
      template:
        src: config.py.j2
        dest: "{{ app_directory }}/config.py"
        owner: www-data
        group: www-data
        mode: '0600'
      notify: restart api-gateway

    - name: Create models file
      template:
        src: models.py.j2
        dest: "{{ app_directory }}/models.py"
        owner: www-data
        group: www-data
        mode: '0644'
      notify: restart api-gateway

    - name: Create services file
      template:
        src: services.py.j2
        dest: "{{ app_directory }}/services.py"
        owner: www-data
        group: www-data
        mode: '0644'
      notify: restart api-gateway

    - name: Create routers directory
      file:
        path: "{{ app_directory }}/routers"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Create authentication router
      template:
        src: auth_router.py.j2
        dest: "{{ app_directory }}/routers/auth.py"
        owner: www-data
        group: www-data
        mode: '0644'
      notify: restart api-gateway

    - name: Create chat router
      template:
        src: chat_router.py.j2
        dest: "{{ app_directory }}/routers/chat.py"
        owner: www-data
        group: www-data
        mode: '0644'
      notify: restart api-gateway

    - name: Create RAG router
      template:
        src: rag_router.py.j2
        dest: "{{ app_directory }}/routers/rag.py"
        owner: www-data
        group: www-data
        mode: '0644'
      notify: restart api-gateway

- name: Configure systemd service
  block:
    - name: Create systemd service file
      template:
        src: api-gateway.service.j2
        dest: /etc/systemd/system/api-gateway.service
        owner: root
        group: root
        mode: '0644'
      notify:
        - reload systemd
        - restart api-gateway

    - name: Start and enable API Gateway service
      systemd:
        name: api-gateway
        state: started
        enabled: yes
        daemon_reload: yes

- name: Configure Nginx reverse proxy
  block:
    - name: Create Nginx configuration
      template:
        src: nginx_api_gateway.conf.j2
        dest: /etc/nginx/sites-available/api-gateway
        owner: root
        group: root
        mode: '0644'
      notify: restart nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/api-gateway
        dest: /etc/nginx/sites-enabled/api-gateway
        state: link
      notify: restart nginx

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Start and enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes

- name: Configure firewall
  block:
    - name: Allow HTTP traffic
      ufw:
        rule: allow
        port: 80
        from_ip: "192.168.10.0/24"

    - name: Allow HTTPS traffic
      ufw:
        rule: allow
        port: 443
        from_ip: "192.168.10.0/24"

    - name: Allow API Gateway port
      ufw:
        rule: allow
        port: "{{ app_port }}"
        from_ip: "192.168.10.0/24"

    - name: Allow metrics port
      ufw:
        rule: allow
        port: "{{ monitoring.metrics_port }}"
        from_ip: "192.168.10.0/24"

- name: Setup monitoring and health checks
  block:
    - name: Create health check script
      template:
        src: health_check.sh.j2
        dest: /usr/local/bin/api_gateway_health_check.sh
        owner: root
        group: root
        mode: '0755'

    - name: Create log rotation configuration
      template:
        src: logrotate.conf.j2
        dest: /etc/logrotate.d/api-gateway
        owner: root
        group: root
        mode: '0644'

- name: Final validation
  block:
    - name: Wait for API Gateway to be ready
      uri:
        url: "http://127.0.0.1:{{ app_port }}{{ monitoring.health_check_endpoint }}"
        method: GET
        timeout: 30
      register: health_check
      until: health_check.status == 200
      retries: 10
      delay: 5

    - name: Test LLM server connectivity
      uri:
        url: "http://127.0.0.1:{{ app_port }}/api/v1/models"
        method: GET
        timeout: 10
      register: models_test

    - name: Display API Gateway status
      debug:
        msg:
          - "=== API GATEWAY DEPLOYMENT COMPLETE ==="
          - "Server: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
          - "API Endpoint: http://{{ ansible_default_ipv4.address }}:{{ app_port }}"
          - "Health Check: {{ monitoring.health_check_endpoint }}"
          - "Workers: {{ app_workers }}"
          - "LLM Integration: {{ llm_endpoints.keys() | list | length }} endpoint groups"
          - "Database Connections: PostgreSQL + Redis"
          - "Vector Database: Qdrant @ {{ vector_db_config.host }}:{{ vector_db_config.port }}"
          - "Models Available: {{ models_test.json.models | length if models_test.json is defined else 'Unknown' }}"
