---
# Testing tools and environment setup
# For CX-Test Server (192.168.10.34)

- name: Copy development requirements for testing tools
  copy:
    src: "{{ playbook_dir }}/../../requirements-dev.txt"
    dest: /opt/citadel/requirements-dev.txt
    owner: agent0
    group: agent0
    mode: '0644'
  become: yes

- name: Install testing requirements in virtual environment
  pip:
    requirements: /opt/citadel/requirements-dev.txt
    virtualenv: /opt/citadel/env
  become_user: agent0

- name: Install additional testing packages and tools
  apt:
    name:
      - nodejs
      - npm
      - docker.io
      - docker-compose
      - sqlite3
      - postgresql-client
      - redis-tools
      - chromium-browser
      - xvfb
    state: present
  become: yes

- name: Add agent0 to docker group
  user:
    name: agent0
    groups: docker
    append: yes
  become: yes

- name: Create testing workspace directory
  file:
    path: /opt/citadel/testing
    state: directory
    owner: agent0
    group: agent0
    mode: '0755'
  become: yes

- name: Create test results directory
  file:
    path: /opt/citadel/testing/results
    state: directory
    owner: agent0
    group: agent0
    mode: '0755'
  become: yes

- name: Create test reports directory
  file:
    path: /opt/citadel/testing/reports
    state: directory
    owner: agent0
    group: agent0
    mode: '0755'
  become: yes

- name: Install additional Python testing packages
  pip:
    name:
      - pytest-html
      - pytest-cov
      - pytest-xvfb
      - selenium
      - playwright
      - locust
      - coverage
      - tox
    virtualenv: /opt/citadel/env
  become_user: agent0

- name: Install Playwright browsers
  shell: /opt/citadel/env/bin/python -m playwright install
  become_user: agent0

- name: Create pytest configuration
  copy:
    content: |
      [pytest]
      testpaths = tests
      python_files = test_*.py *_test.py
      python_classes = Test* *Tests
      python_functions = test_*
      addopts = 
          --verbose
          --tb=short
          --strict-markers
          --disable-warnings
          --html=reports/pytest_report.html
          --self-contained-html
          --cov=src
          --cov-report=html:reports/coverage_html
          --cov-report=xml:reports/coverage.xml
          --cov-report=term-missing
      markers =
          slow: marks tests as slow (deselect with '-m "not slow"')
          integration: marks tests as integration tests
          unit: marks tests as unit tests
          api: marks tests as API tests
          frontend: marks tests as frontend tests
    dest: /opt/citadel/testing/pytest.ini
    owner: agent0
    group: agent0
    mode: '0644'
  become: yes

- name: Create test automation script
  copy:
    content: |
      #!/bin/bash
      # CX-Test Server Automated Testing Script
      
      echo "CX R&D Infrastructure - Automated Testing Suite"
      echo "==============================================="
      
      cd /opt/citadel/testing
      source /opt/citadel/env/bin/activate
      
      # Create timestamp for this test run
      TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
      RUN_DIR="/opt/citadel/testing/results/run_$TIMESTAMP"
      mkdir -p "$RUN_DIR"
      
      echo "Test run directory: $RUN_DIR"
      echo "Starting test execution at $(date)"
      
      # Run pytest with full reporting
      pytest --html="$RUN_DIR/pytest_report.html" \
             --cov-report=html:"$RUN_DIR/coverage_html" \
             --cov-report=xml:"$RUN_DIR/coverage.xml" \
             --junitxml="$RUN_DIR/junit.xml" \
             -v
      
      # Generate test summary
      echo "Test execution completed at $(date)"
      echo "Results saved to: $RUN_DIR"
      
      # Display summary
      if [ -f "$RUN_DIR/junit.xml" ]; then
          echo "JUnit XML report generated"
      fi
      
      if [ -d "$RUN_DIR/coverage_html" ]; then
          echo "Coverage HTML report generated"
      fi
      
      echo "Test automation script completed"
    dest: /opt/citadel/testing/run_tests.sh
    owner: agent0
    group: agent0
    mode: '0755'
  become: yes

- name: Create performance testing configuration
  copy:
    content: |
      # Locust performance testing configuration
      from locust import HttpUser, task, between
      
      class CXAPIUser(HttpUser):
          wait_time = between(1, 3)
          
          @task
          def health_check(self):
              self.client.get("/health")
          
          @task(3)
          def api_endpoint(self):
              self.client.get("/api/v1/status")
    dest: /opt/citadel/testing/locustfile.py
    owner: agent0
    group: agent0
    mode: '0644'
  become: yes

- name: Create testing environment verification script
  copy:
    content: |
      #!/bin/bash
      echo "CX-Test Server Environment Verification"
      echo "======================================"
      echo "Python Version: $(python --version)"
      echo "Node.js Version: $(node --version)"
      echo "Docker Version: $(docker --version)"
      echo "Chromium Version: $(chromium-browser --version)"
      echo ""
      echo "Testing Packages Installed:"
      pip list | grep -E "(pytest|selenium|playwright|locust|coverage|tox)"
      echo ""
      echo "Playwright Browsers:"
      source /opt/citadel/env/bin/activate && playwright --version
      echo ""
      echo "Testing Directories:"
      ls -la /opt/citadel/testing/
    dest: /opt/citadel/test_env_check.sh
    owner: agent0
    group: agent0
    mode: '0755'
  become: yes
