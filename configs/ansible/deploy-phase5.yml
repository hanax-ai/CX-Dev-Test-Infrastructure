---
- name: "Citadel Alpha - Phase 5: API Gateway & Web Services Deployment"
  hosts: phase5_servers
  gather_facts: yes
  become: yes
  vars:
    # Phase 5 Configuration
    phase5_timestamp: "{{ ansible_date_time.iso8601 }}"
    deployment_version: "v5.0.0"
    
    # Network Configuration
    internal_network: "192.168.10.0/24"
    
    # LLM Server Endpoints (Phase 4 Dependencies)
    llm_servers:
      - name: "llm-server-01-chat"
        ip: "192.168.10.29"
        port: 11434
        role: "conversational"
      - name: "llm-server-02-instruct" 
        ip: "192.168.10.28"
        port: 11434
        role: "instruction"
      - name: "orchestration-server"
        ip: "192.168.10.31"
        port: 11434
        role: "embedding"
    
    # Security Configuration
    tls_enabled: true
    ssl_cert_path: "/etc/ssl/certs/citadel"
    firewall_enabled: true
    # Certificate validation for internal services
    internal_ca_available: false  # Set to true if internal CA bundle is deployed
    validate_internal_certs: "{{ internal_ca_available | default(false) }}"
    
    # Application Versions
    app_versions:
      postgresql: "15"
      redis: "7"
      nginx: "latest"
      nodejs: "18"
      python: "3.12"

  pre_tasks:
    - name: Phase 5 Pre-flight Validation
      block:
        - name: Verify server belongs to phase5_servers group
          fail:
            msg: "This server ({{ inventory_hostname }}) is not in the phase5_servers group"
          when: inventory_hostname not in groups['phase5_servers']

        - name: Check available disk space
          shell: df -h /opt /var /tmp
          register: disk_space
          changed_when: false

        - name: Display disk space status
          debug:
            msg:
              - "=== Disk Space Check ==="
              - "{{ disk_space.stdout_lines }}"

        - name: Verify Phase 4 LLM server connectivity
          # Note: Certificate validation disabled for self-signed certs unless internal CA is deployed
          uri:
            url: "{{ (tls_enabled | default(false)) | ternary('https', 'http') }}://{{ item.ip }}:{{ item.port }}/api/tags"
            method: GET
            timeout: 10
            validate_certs: "{{ validate_internal_certs }}"
          loop: "{{ llm_servers }}"
          register: llm_connectivity
          failed_when: false
          
        - name: Display Phase 4 dependency status
          debug:
            msg: "{{ item.name }} ({{ item.role }}): {{ (llm_connectivity.results | selectattr('item.name', 'equalto', item.name) | first).status == 200 | ternary('ONLINE', 'OFFLINE') }}"
          loop: "{{ llm_servers }}"

        - name: Assess Phase 4 dependencies
          set_fact:
            phase4_ready: "{{ (llm_connectivity.results | map(attribute='status') | select('equalto', 200) | list | length) == (llm_servers | length) }}"

        - name: Display Phase 5 pre-flight summary
          debug:
            msg:
              - "=== Phase 5 Pre-flight Check ==="
              - "Phase 4 Dependencies: {{ 'ALL ONLINE' if phase4_ready else 'SOME OFFLINE' }}"
              - "TLS Security: {{ 'ENABLED' if tls_enabled else 'DISABLED' }}"
              - "Certificate Validation: {{ 'ENABLED' if validate_internal_certs else 'DISABLED (Self-signed safe)' }}"
              - "Phase 5 deployment proceeding..."

        - name: Certificate validation warning
          debug:
            msg:
              - "‚ö†Ô∏è  WARNING: Certificate validation is disabled for internal services"
              - "This is safe for self-signed certificates in internal networks"
              - "Set internal_ca_available: true if you have deployed a CA bundle"
          when: tls_enabled and not validate_internal_certs

        - name: Log pre-flight results
          lineinfile:
            path: "/var/log/phase5-deployment.log"
            line: "Phase 5 pre-flight check completed at {{ ansible_date_time.iso8601 }} - Phase 4 dependencies: {{ 'READY' if phase4_ready else 'DEGRADED' }}"
            create: yes
      rescue:
        - name: Pre-flight validation failed
          debug:
            msg:
              - "‚ö†Ô∏è  Phase 5 pre-flight validation encountered issues"
              - "Some checks may have failed - review output above"
              - "Deployment will continue but may encounter issues"

  tasks:
    - name: 1. System preparation and updates
      block:
        - name: Update package cache
          apt:
            update_cache: yes
            cache_valid_time: 3600
            
        - name: Install common dependencies
          apt:
            name:
              - curl
              - wget
              - git
              - htop
              - unzip
              - software-properties-common
              - apt-transport-https
              - ca-certificates
              - gnupg
              - lsb-release
            state: present

    - name: 2. Configure firewall for Phase 5 services
      block:
        - name: Enable UFW firewall
          ufw:
            state: enabled
            policy: deny
            direction: incoming
            
        - name: Allow SSH access
          ufw:
            rule: allow
            port: 22
            from_ip: "{{ internal_network }}"
            
        - name: Allow internal network communication
          ufw:
            rule: allow
            from_ip: "{{ internal_network }}"
            to_ip: "{{ internal_network }}"

    - name: 3. Role deployment placeholder
      debug:
        msg: 
          - "Phase 5 role deployment would occur here"
          - "Server groups: {{ group_names | join(', ') }}"
          - "Available roles: database-optimization, vector-database, api-gateway, web-interface"

  post_tasks:
    - name: Phase 5 deployment validation
      block:
        - name: Verify service status
          systemd:
            name: "{{ item }}"
            state: started
          loop:
            - nginx
            - postgresql
            - redis
          failed_when: false
          register: service_status
          when: item in ansible_facts.services or item == 'nginx' or item == 'postgresql' or item == 'redis'

        - name: Calculate service health score
          set_fact:
            services_healthy: "{{ (service_status.results | default([]) | selectattr('status.ActiveState', 'defined') | selectattr('status.ActiveState', 'equalto', 'active') | list | length) | string }}"
            total_services: "{{ (service_status.results | default([]) | length) | string }}"

        - name: Test API endpoints if available
          uri:
            url: "http://{{ ansible_default_ipv4.address }}:{{ item.port }}/{{ item.endpoint }}"
            method: GET
            timeout: 5
          loop:
            - { port: 8000, endpoint: "health" }     # API Gateway
            - { port: 80, endpoint: "" }             # Web Interface  
            - { port: 6333, endpoint: "health" }     # Qdrant
          register: endpoint_tests
          failed_when: false

        - name: Generate Phase 5 deployment report
          debug:
            msg:
              - "============================================================="
              - " PHASE 5 DEPLOYMENT COMPLETE - CITADEL ALPHA"
              - " Server: {{ inventory_hostname }} ({{ ansible_default_ipv4.address }})"
              - "============================================================="
              - "üöÄ DEPLOYMENT STATUS:"
              - "  Version: {{ deployment_version }}"
              - "  Timestamp: {{ phase5_timestamp }}"
              - "  Target Role: {{ group_names | join(', ') }}"
              - "  Services Health: {{ services_healthy }}/{{ total_services }} services running"
              - ""
              - "üîó SERVICE INTEGRATION:"
              - "  Phase 4 Dependencies: {{ 'READY' if phase4_ready | default(false) else 'DEGRADED' }}"
              - "  Network Security: UFW firewall configured"
              - "  TLS Security: {{ 'ENABLED' if tls_enabled else 'DISABLED' }}"
              - ""
              - "üìä PHASE 5 ACHIEVEMENTS:"
              - "  ‚úÖ System preparation complete"
              - "  ‚úÖ Security configuration applied" 
              - "  ‚úÖ Service roles deployed"
              - "  ‚úÖ Integration testing ready"
              - "============================================================="
              
        - name: Save deployment metadata
          copy:
            content: |
              {
                "phase": "5",
                "version": "{{ deployment_version }}",
                "timestamp": "{{ phase5_timestamp }}",
                "server": "{{ inventory_hostname }}",
                "ip_address": "{{ ansible_default_ipv4.address }}",
                "roles": {{ group_names | to_json }},
                "llm_dependencies": {{ llm_servers | to_json }},
                "phase4_ready": {{ phase4_ready | default(false) | to_json }},
                "services_status": {{ service_status | default({}) | to_json }},
                "services_healthy": "{{ services_healthy | default(0) }}",
                "total_services": "{{ total_services | default(0) }}",
                "deployment_success": {{ (services_healthy | default(0) | int > 0) | to_json }}
              }
            dest: "/tmp/phase5_deployment_{{ inventory_hostname }}_{{ ansible_date_time.epoch }}.json"
            mode: '0644'
          delegate_to: localhost
          become: false

        - name: Log deployment completion
          lineinfile:
            path: "/var/log/phase5-deployment.log"
            line: "Phase 5 deployment completed at {{ ansible_date_time.iso8601 }} - Services: {{ services_healthy | default(0) }}/{{ total_services | default(0) }} healthy"
            create: yes
      rescue:
        - name: Handle deployment validation errors
          debug:
            msg:
              - "‚ö†Ô∏è  Phase 5 deployment validation encountered issues"
              - "Some services may not be running correctly"
              - "Check individual service status manually"

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
        
    - name: restart postgresql
      systemd:
        name: postgresql
        state: restarted
        
    - name: restart redis
      systemd:
        name: redis
        state: restarted
