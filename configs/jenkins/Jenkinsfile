// definitive-citadel-deploy.groovy
// Citadel AI Infrastructure - Production Deployment Pipeline
// Version: v1.0
// Author: Hana-X DevOps
// Last Updated: 2025-08-04
// Scope: Phase 4 (AI Processing Tier) and Phase 5 (Data & Services Tier)

pipeline {
    agent {
        label 'azure-devops-agent'
    }

    environment {
        PYTHON_VENV = '/opt/citadel/env'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }

    triggers {
        cron('H 2 * * *')                 // Daily scheduled trigger
        pollSCM('H/15 * * * *')           // Poll for SCM changes every 15 mins
    }

    parameters {
        booleanParam(name: 'RUN_PREFLIGHT_CHECKS', defaultValue: true, description: 'Run pre-deployment validation checks')
        booleanParam(name: 'DEPLOY_PHASE_4', defaultValue: true, description: 'Deploy Phase 4: AI Processing Tier')
        booleanParam(name: 'DEPLOY_PHASE_5', defaultValue: true, description: 'Deploy Phase 5: Data & Services Tier')
        booleanParam(name: 'RUN_POST_DEPLOY_VALIDATION', defaultValue: true, description: 'Run full system integration tests')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out repository...'
                checkout scm
            }
        }

        stage('Pre-Flight Checks') {
            when { expression { params.RUN_PREFLIGHT_CHECKS == true } }
            steps {
                echo 'üîç Running pre-deployment Ansible validation...'
                dir('configs/ansible') {
                    sh 'ansible-playbook -i inventory.yaml preflight-checks.yml'
                }
            }
        }

        stage('Deploy Phase 4 - AI Processing Tier') {
            when { expression { params.DEPLOY_PHASE_4 == true } }
            steps {
                echo 'ü§ñ Deploying Orchestration and LLM Servers (Phase 4)...'
                dir('configs/ansible') {
                    sh 'ansible-playbook -i inventory.yaml deploy-orchestration-server.yml'
                    sh 'ansible-playbook -i inventory.yaml deploy-llm-server-01.yml'
                    sh 'ansible-playbook -i inventory.yaml deploy-llm-server-02.yml'
                }
            }
        }

        stage('Deploy Phase 5 - Data & Services Tier') {
            when { expression { params.DEPLOY_PHASE_5 == true } }
            steps {
                echo 'üåê Deploying Vector DB, Web UI, and Metrics...'
                echo 'üîç Validating Phase 5 integrations...'
                withEnv(["PATH+PYTHON=${PYTHON_VENV}/bin"]) {
                    sh './scripts/test_qdrant_remote.sh'
                    sh 'python3 scripts/test_postgres_connection.py'
                    sh 'python3 scripts/diagnose_web_ui_server_paramiko.py'
                }
            }
        }

        stage('Post-Deployment Validation') {
            when { expression { params.RUN_POST_DEPLOY_VALIDATION == true } }
            steps {
                echo 'ü©∫ Running final system validation tests...'
                withEnv(["PATH+PYTHON=${PYTHON_VENV}/bin"]) {
                    sh './scripts/check_phase5_servers_headless.sh'
                }
            }
            post {
                success {
                    echo '‚úÖ Post-deployment validation successful.'
                    sh "echo \"[`date '+%Y-%m-%d %H:%M:%S'`] All Phase 5 services validated successfully.\" > validation-report.log"
                    archiveArtifacts artifacts: 'validation-report.log'
                }
                failure {
                    echo '‚ùå One or more services failed validation.'
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo '‚úÖ Citadel AI Infrastructure deployment completed successfully.'
        }
        failure {
            echo '‚ùå Citadel deployment failed. Check logs and validation results.'
        }
    }
}
