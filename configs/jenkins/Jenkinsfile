// CX R&D Infrastructure - Definitive Jenkins Pipeline
pipeline {
    agent {
        // Run on a pre-configured Jenkins agent
        label 'azure-devops-agent'
    }

    environment {
        // Centralized environment variables for the pipeline
        PYTHON_VENV = '/opt/citadel/env'
    }

    options {
        // Production-grade pipeline options
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }

    triggers {
        // Automatically run daily and on code changes
        cron('H 2 * * *')
        pollSCM('H/15 * * * *')
    }

    parameters {
        // Allow manual overrides and configuration
        booleanParam(name: 'RUN_PREFLIGHT_CHECKS', defaultValue: true, description: 'Run the pre-flight validation playbook.')
        booleanParam(name: 'DEPLOY_PHASE_4', defaultValue: true, description: 'Deploy Phase 4: AI Processing Tier.')
        booleanParam(name: 'DEPLOY_PHASE_5', defaultValue: true, description: 'Deploy Phase 5: Data & Services Tier.')
        booleanParam(name: 'RUN_POST_DEPLOY_VALIDATION', defaultValue: true, description: 'Run the comprehensive post-deployment validation suite.')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out repository...'
                checkout scm
            }
        }

        stage('Pre-Flight Checks') {
            when { expression { params.RUN_PREFLIGHT_CHECKS == true } }
            steps {
                echo 'üîç Running pre-deployment validation on all servers...'
                dir('configs/ansible') {
                    sh 'ansible-playbook -i inventory.yaml preflight-checks.yml'
                }
            }
        }

        stage('Deploy AI Processing Tier (Phase 4)') {
            when { expression { params.DEPLOY_PHASE_4 == true } }
            steps {
                echo 'ü§ñ Deploying Phase 4: AI Processing Tier...'
                dir('configs/ansible') {
                    sh 'ansible-playbook -i inventory.yaml deploy-orchestration-server.yml'
                    sh 'ansible-playbook -i inventory.yaml deploy-llm-server-01.yml'
                    sh 'ansible-playbook -i inventory.yaml deploy-llm-server-02.yml'
                }
            }
        }

        stage('Deploy Data & Services Tier (Phase 5)') {
            when { expression { params.DEPLOY_PHASE_5 == true } }
            steps {
                echo 'üåê Deploying Phase 5: Data & Services Tier...'
                dir('configs/ansible') {
                    sh 'ansible-playbook -i ../../ansible/inventory/hosts.yml deploy-api-gateway.yml --ask-become-pass'
                }
                echo 'üîç Running Phase 5 validation tests...'
                sh 'python3 scripts/test_api_gateway.py'
                sh './test_qdrant_remote.sh'
                sh 'python3 scripts/test_postgres_connection.py'
                sh 'python3 scripts/diagnose_web_ui_server_paramiko.py'
            }
        }

        stage('Comprehensive Validation') {
            when { expression { params.RUN_POST_DEPLOY_VALIDATION == true } }
            steps {
                echo 'ü©∫ Running comprehensive cross-service integration tests...'
                // Use withEnv to ensure scripts run inside the correct Python virtual environment
                withEnv(["PATH+PYTHON=${PYTHON_VENV}/bin"]) {
                    sh './check_phase5_servers_headless.sh'
                    sh 'echo "‚úÖ All Phase 5 services integration tested successfully"'
                }
            }
            post {
                success {
                    echo '‚úÖ All services validated successfully.'
                    sh "echo \"[`date '+%Y-%m-%d %H:%M:%S'`] All Phase 5 services validated and operational.\" > validation-report.log"
                    archiveArtifacts artifacts: 'validation-report.log'
                }
                failure {
                    echo '‚ùå One or more services failed validation.'
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo '‚úÖ Citadel AI Infrastructure deployment completed successfully!'
        }
        failure {
            echo '‚ùå Citadel AI Infrastructure deployment failed. Please review logs.'
        }
    }
}