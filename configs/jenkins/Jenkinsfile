// CX R&D Infrastructure - Jenkins Pipeline
// Declarative pipeline for infrastructure deployment and management
// Updated: July 31, 2025

pipeline {
    agent {
        label 'azure-devops-agent'
    }
    
    environment {
        TERRAFORM_VERSION = '1.12.2'
        ANSIBLE_VERSION = '11.8.0'
        CX_ENVIRONMENT = 'cx_rnd_infrastructure'
        PYTHON_VENV = '/opt/citadel/env'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }
    
    triggers {
        cron('H 2 * * *')  // Daily deployment check
        pollSCM('H/15 * * * *')  // Poll SCM every 15 minutes
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Checking out CX Infrastructure repository...'
                checkout scm
                sh 'pwd && ls -la'
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo 'üîß Setting up build environment...'
                sh '''
                    source ${PYTHON_VENV}/bin/activate
                    python --version
                    terraform version
                    ansible --version
                '''
            }
        }
        
        stage('Terraform Plan') {
            steps {
                echo 'üìã Creating Terraform execution plan...'
                dir('configs/terraform') {
                    sh '''
                        terraform init -no-color
                        terraform validate -no-color
                        terraform plan -no-color -out=tfplan
                    '''
                }
            }
        }
        
        stage('Infrastructure Validation') {
            steps {
                echo '‚úÖ Validating infrastructure configuration...'
                dir('configs/ansible') {
                    sh '''
                        source ${PYTHON_VENV}/bin/activate
                        ansible-inventory -i inventory.yml --list
                        ansible-playbook site.yml --syntax-check
                    '''
                }
            }
        }
        
        stage('Deploy Infrastructure') {
            when {
                anyOf {
                    branch 'main'
                    expression { params.FORCE_DEPLOY == true }
                }
            }
            steps {
                echo 'üöÄ Deploying CX R&D Infrastructure...'
                dir('configs/terraform') {
                    sh 'terraform apply -no-color -auto-approve tfplan'
                }
                dir('configs/ansible') {
                    sh '''
                        source ${PYTHON_VENV}/bin/activate
                        ansible-playbook -i inventory.yml site.yml --diff
                    '''
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo 'üè• Running infrastructure health checks...'
                sh '''
                    if [ -f scripts/health-check.sh ]; then
                        chmod +x scripts/health-check.sh
                        ./scripts/health-check.sh
                    else
                        echo "Health check script not found, skipping..."
                    fi
                '''
            }
        }
        
        stage('Generate Reports') {
            steps {
                echo 'üìä Generating deployment reports...'
                sh '''
                    echo "=== CX Infrastructure Deployment Report ===" > deployment-report.txt
                    echo "Date: $(date)" >> deployment-report.txt
                    echo "Branch: ${GIT_BRANCH}" >> deployment-report.txt
                    echo "Commit: ${GIT_COMMIT}" >> deployment-report.txt
                    echo "Build: ${BUILD_NUMBER}" >> deployment-report.txt
                    echo "" >> deployment-report.txt
                    
                    if [ -f configs/terraform/deployment-metadata.json ]; then
                        echo "=== Terraform Metadata ===" >> deployment-report.txt
                        cat configs/terraform/deployment-metadata.json >> deployment-report.txt
                        echo "" >> deployment-report.txt
                    fi
                '''
                
                archiveArtifacts artifacts: 'deployment-report.txt', fingerprint: true
                archiveArtifacts artifacts: 'configs/terraform/tfplan', fingerprint: true
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            cleanWs()
        }
        
        success {
            echo '‚úÖ CX Infrastructure deployment completed successfully!'
            // Add notification logic here
        }
        
        failure {
            echo '‚ùå CX Infrastructure deployment failed!'
            // Add failure notification logic here
        }
        
        unstable {
            echo '‚ö†Ô∏è CX Infrastructure deployment completed with warnings!'
        }
    }
    
    parameters {
        booleanParam(
            name: 'FORCE_DEPLOY',
            defaultValue: false,
            description: 'Force deployment even if not on main branch'
        )
        choice(
            name: 'LOG_LEVEL',
            choices: ['INFO', 'DEBUG', 'WARN', 'ERROR'],
            description: 'Log level for deployment'
        )
    }
}
